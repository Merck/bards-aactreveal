% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/query_outcomes.R
\name{query_outcomes}
\alias{query_outcomes}
\title{query_outcomes: Find specific outcome(s) of interest}
\usage{
query_outcomes(
  con = NULL,
  path_raw = NULL,
  file_type = NULL,
  board = NULL,
  database = NULL,
  user_nct_ids = NULL,
  analy_study = NULL,
  outcome_analyses_processed = NULL,
  outcome_measures_processed = NULL,
  outcome_type = NULL,
  outcome_list = NULL,
  outcome_name = NULL,
  verbose = TRUE
)
}
\arguments{
\item{con}{Connection information for AACT (needed if connecting to database)}

\item{path_raw}{File path for raw AACT data (will ignore "con" argument if provided)}

\item{file_type}{File type for the raw AACT (ex: "txt" or "rda")}

\item{board}{Pins board}

\item{database}{Only used if con is not NULL. This is only needed if AACT data-tables are
stored such that data-tables are extracted using "select * from database.baseline" etc.}

\item{user_nct_ids}{Vector of unique NCT IDs (ex: from query_aact.R output).
This is only needed if outcome_measures_processsed/outcome_analyses_processed
are not provided (see below).}

\item{analy_study}{Analysis Study table}

\item{outcome_analyses_processed}{Processed outcome analyses data-set.
This is generated by running process_outcomes.R (not required)}

\item{outcome_measures_processed}{Processed outcome measures data-set.
This is generated by running process_outcomes.R (not required)}

\item{outcome_type}{Pre-specified outcomes (TBD; not currently available)}

\item{outcome_list}{List of outcome-based parameters to search for}

\item{outcome_name}{Vector of names for the searched outcomes (if NULL, uses generic names).}

\item{verbose}{If TRUE, messages describing process will be printed}
}
\description{
Function to query outcome data (outcome measurements and outcome analyses data-tables),
for example search for "overall survival" data.
}
\details{
The inputs for outcome querying (outcome_list) should be in the following form:

outcome_list <- list(include = c("a"), exclude = c("b"), units= c("d"),
 type=c("e"), range = c(0, 100), include_param_type = c("f") )

 Only "include" is required for the function to work. The remaining
 arguments will apply further restrictions.

 "include" checks if the outcome title includes the search terms,
 "exclude" removes entries that include the exclusion terms,
 "units" searches the outcome_measurements units column,
 "type" searches the outcome_measurements param_type column,
 "range" checks whether the outcome_measurements value is within a certain range,
 and "include_param_type" checks the outcome_analyses param_type column.

 To include multiple outcomes in the search, we can combine multiple lists:

outcome_list1 <- list(include = c("a1"), exclude = c("b1"), units= c("d1"),
 type=c("e1"), range = c(0, 100), include_param_type = c("f") )

outcome_list2 <- list(include = c("a2"), exclude = c("b2"), units= c("d2"),
 type=c("e2"), range = c(0, 125), include_param_type = c("f2") )

 These outcomes can be assigned names through the "outcome_name" argument.
}
\examples{

\donttest{

library(aactreveal)

# Load package RDA for illustrative purposes #
table_names <- c("browse_interventions", "conditions", "design_group_interventions",
"design_groups","designs", "interventions", "outcome_analyses", "outcome_analysis_groups",
"outcome_measurements", "result_groups", "sponsors", "studies")

data(list=table_names, package="aactreveal")

# Query based on just intervention (any disease indications) #
terms_int <- "pembrolizumab" # Intervention / treatment
query_init <- query_aact(terms_int = terms_int, terms_cond = NULL)

orr_list <- list(include = c("overall response rate", "objective response rate"),
exclude = c("disease control rate"),type = c("number"),range = c(0, 100) )
os_list <- list(include = c("overall survival"))
outcome_list <- list(orr_list, os_list)
outcome_name <- c("ORR", "OS")
query_out <- query_outcomes(path_raw=path_raw, user_nct_ids = query_init$user_nct_ids,
outcome_list = outcome_list, outcome_name = outcome_name,
verbose = TRUE)

}

}
